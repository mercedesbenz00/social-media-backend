plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.3'
    id("com.github.johnrengelman.processes") version "0.5.0"
    id 'au.com.dius.pact' version '4.1.8'
    id 'java'
}


repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

test {
    useJUnitPlatform()
}

configurations {
    all {
        /* only junit 5 should be used */
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencies {
    compileOnly 'org.springframework.cloud:spring-cloud-starter-sleuth'

    implementation group: 'org.bytedeco', name: 'javacv-platform', version: '1.5.7'
    implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.8.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.datastax.cassandra:cassandra-driver-core:3.6.0'
    implementation 'org.cognitor.cassandra:cassandra-migration-spring-boot-starter:2.5.0_v4'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.14.1'

    implementation project(':social-common')
    implementation project(':social-common-classes')
    implementation project(":social-common-security")
    implementation project(":social-error-handling")
    implementation project(':services:person-client')
    implementation project(':services:short-video-registry-client')

    runtimeOnly 'com.h2database:h2'
    implementation 'com.github.dozermapper:dozer-core:6.1.0'

    testImplementation 'au.com.dius.pact.consumer:java8:4.1.36'
    testImplementation 'au.com.dius.pact.consumer:junit5:4.1.36'

     testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation 'au.com.dius.pact.provider:junit5spring:4.1.36'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'com.fasterxml.uuid', name:'java-uuid-generator', version:'3.1.4'
}

springBoot {
    mainClass = 'iq.earthlink.social.shortvideoregistryservice.ShortVideoRegistryServiceApplication'
    buildInfo()
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

pact {
    publish {
        pactDirectory = "${buildDir}/pacts"
        pactBrokerUrl = 'http://localhost:8000/'
        pactBrokerUsername = 'pact_workshop'
        pactBrokerPassword = 'pact_workshop'
        tags = [getGitBranch(), 'test', 'dev']
        consumerVersion = getGitHash()
    }
}