server:
  port: ${PORT:8080}
  auth:
    secret: ${SECRET_KEY:EkQCe8jwME187iyzqpxNPUlwu9MaMkXY}
    apiAuthHeader: X-API-KEY
    apiSecretKey: ${API_SECRET_KEY:secret}
social:

  # URL prefix for all controllers in the service
  #  url-prefix: post-service
  job:
    fixedDelay: "60000"
  postservice:
    youtube-api-key: AIzaSyAyH0V_pisA24F-y_5akSvkx6I7aXBBsR4
    max-number-images-per-story: 10
    spam:
      message-minimal-count: 10
      block-creating-spam-messages: true
      comment-period-minutes: 600
      comment-maximum-count: 1000

    commentbans:
      # every 15 min (for dev env)
      cron: "0 */15 * * * ?"
      # Every day at 3 am - for production
      # cron: "0 0 3 * * ?"
    rabbitmq:
      dlq:
        # Rabbit MQ dead-letter-queue messages time-to-live in hours;
        # deadMessage.queue needs to be deleted to accept updated value:
        ttl: ${DLQ_TTL:24}
    statistics:
      # every 2 min (for dev env)
      cron: ${POST_STATISTICS_CRON:0 */2 * * * ?}
        # Every day at 2 am - for production
        #      cron: "0 0 2 * * ?"
      # Synchronize post statistics on first day of every month at midnight:
      sync: ${POST_STATISTICS_CRON_SYNC:0 0 1 * * ?}
      activity-popular-days-count: 30
      activity-trending-days-count: 7

    stories:
      story-lifetime-days: 1
      image-max-count: 1
      # Max image size in MB
      image-max-size: 10

      video-max-count: 1
      # Max video size in MB
      video-max-size: 200

    files:
      image-max-count: 25
      # Max image size in MB
      image-max-size: 10

      video-max-count: 1
      # Max video size in MB
      video-max-size: 200

    comments:
      number-of-replies-to-show: 2
      top-replies-depth: 1
      # Max image size in MB
      image-max-size: 10

      # Max video size in MB
      video-max-size: 200

    link-preview:
        api-key: ${LINK_PREVIEW_API_KEY:fb754ea2c4e03359eab61c5501f4ee61}
        api-url: https://api.linkpreview.net/

  openid:
    key-id: 8810EE7F53ABDB0065EF6417FDEB7C20060E04D5
    jwks-url: https://sn-ident.earthlink.iq/core/.well-known/openid-configuration/jwks
    #    key-id: A285DC6845EC6F04415FB60D6A70EC2F9D192AE0
    #    jwks-url: https://account4.shabakaty.com/core/.well-known/openid-configuration/jwks
    #    key-id: 8810EE7F53ABDB0065EF6417FDEB7C20060E04D5
    #    jwks-url: https://social.identity.apps.okd.earthlink.iq/core/.well-known/openid-configuration/jwks

    access-token-header-name: access-token
    role-claim-name: socialnetwork.role

  fileservice:
    #    url: http://10.4.13.82:5000/api
    url: http://fs-go-sn-stg.apps.okd.earthlink.iq/api
    tus-url: http://10.4.13.82:5000/files
    configuration-key: socialntest
    fileServiceDomainForTUS: http://10.4.13.82:5000/api/files/
    images-url-postfix: /image

    small:
      maxHeight: 100
      maxWidth: 100
    medium:
      maxHeight: 500
      maxWidth: 500
    big:
      maxHeight: 1200
      maxWidth: 1200
    xl:
      maxHeight: 3000
      maxWidth: 3000


  restclient:
    connectionTimeout: 30000
    readTimeout: 30000
spring:
  sleuth:
    messaging:
      kafka:
        enabled: false
  application:
    name: post-service
  cache:
    type: redis
  servlet:
    multipart:
      max-request-size: ${MAX_REQUEST_SIZE:250MB}
      max-file-size: ${MAX_FILE_SIZE:250MB}
  rabbitmq:
    host: ${RABBIT_HOST:localhost}
    port: ${RABBIT_PORT:5672}
    username: ${RABBIT_USER:guest}
    password: ${RABBIT_PASS:guest}
  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.xml
  main:
    allow-bean-definition-overriding: true
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQL82Dialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        cache:
          use_query_cache: true
          use_second_level_cache: true
          factory_class: org.redisson.hibernate.RedissonRegionFactory
          redisson:
            fallback: true
            config: redisson.yaml
            entity:
              eviction:
                max_entries: ${CACHE_ENTITY_MAX_ENTRIES:200000}
              expiration:
                time_to_live: ${CACHE_ENTITY_TTL:1800000}
                max_idle_time: ${CACHE_ENTITY_IDLE_TIME:300000}
            query:
              eviction:
                max_entries: ${CACHE_QUERY_MAX_ENTRIES:200000}
              expiration:
                time_to_live: ${CACHE_QUERY_TTL:1800000}
                max_idle_time: ${CACHE_QUERY_IDLE_TIME:300000}
            collection:
              eviction:
                max_entries: ${CACHE_COLLECTION_MAX_ENTRIES:200000}
              expiration:
                time_to_live: ${CACHE_COLLECTION_TTL:1800000}
                max_idle_time: ${CACHE_COLLECTION_IDLE_TIME:300000}
        jdbc:
          lob:
            non_contextual_creation: true
    show-sql: false
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max.block.ms: 4000
    consumer:
      group-id: group-id
      auto-offset-reset: earliest
      properties:
        isolation.level: read_committed
    admin:
      properties:
        postEventTopic:
          partitions: ${POST_CREATED_TOPIC_PARTITIONS:10}
          replicas: ${POST_CREATED_TOPIC_REPLICAS:1}
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASS:guest}
    database: ${REDIS_DB:0}

  # Data source configuration for user groups
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/post_service}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USER:earthlink}
    password: ${DB_PASSWORD:example}
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  jackson:
    serialization:
      write_dates_as_timestamps: true
web:
  cors:
    allowedOrigins: ${ALLOWED_ORIGINS:*}
    allowedHeaders: ${ALLOWED_HEADERS:*}
    allowedMethods: ${ALLOWED_METHODS:*}
    allowCredentials: ${ALLOWED_CREDENTIALS:false}

management:
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: ['health', 'metrics', 'prometheus']
  metrics:
    export:
      prometheus:
        enabled: true
        pushgateway:
          enabled: true
filestorage:
  minio:
    endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
    externalEndpoint: ${MINIO_EXTERNAL_ENDPOINT:http://localhost:9000}
    accessKey: ${MINIO_ACCESS_KEY:minio}
    secretKey: ${MINIO_SECRET_KEY:password}
    bucketName: ${MINIO_BUCKET:social-media-bucket}

group:
  service:
    url: ${GROUP_SERVICE_URL:http://localhost:8082}

feign:
  client:
    config:
      default:
        connect-timeout: 60000
        read-timeout: 60000
        loggerLevel: FULL

person:
  service:
    url: ${PERSON_SERVICE_URL:http://localhost:8081}

transcode:
  service:
    url: ${TRANSCODE_SERVICE_URL:http://localhost:8033}

pactbroker:
  url: ${PACT_BROKER_URL:http://localhost:8000}
  auth:
    username: ${PACT_BROKER_USERNAME:pact_workshop}
    password:  ${PACT_BROKER_PASSWORD:pact_workshop}

sentry:
  dsn: ${SENTRY_DSN:https://5807e19a3a2943f6862270d23262508f@o4505390493073408.ingest.sentry.io/4505390512340992}
  environment: ${SENTRY_ENVIRONMENT:local}
