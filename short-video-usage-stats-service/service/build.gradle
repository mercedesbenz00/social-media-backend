buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'au.com.dius.pact.provider:gradle:4.1.7'
    }
}

plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id "org.openapi.generator" version '5.4.0'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.3'
    id 'com.github.davidmc24.gradle.plugin.avro-base'  version '1.0.0'
    id 'au.com.dius.pact' version '4.1.7'
    id 'java'
}


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

def generatedSourcesDir = file('src/generated/main/java')
idea {
    module {
        sourceDirs += generatedSourcesDir
        generatedSourceDirs += generatedSourcesDir
    }
}

dependencies {
    implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.8.1'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'junit:junit:4.13.1'
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'com.github.dozermapper:dozer-core:6.1.0'

    implementation group: 'org.apache.avro', name: 'avro', version: '1.10.2'
    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.5.1'
    implementation project(':social-common')
    implementation project(":social-error-handling")
    implementation project(':services:person-client')

    testImplementation 'org.apache.commons:commons-lang3:3.8.1'
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'au.com.dius.pact.consumer:java8:4.1.36'
    testImplementation 'au.com.dius.pact.consumer:junit5:4.1.36'
    testImplementation 'au.com.dius.pact.provider:junit5spring:4.1.36'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

configurations {
    all {
        /* only junit 5 should be used */
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}


def generateAvro = tasks.register("generateAvro", com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/java/avro")
    outputDir = file("src/generated/main/java")
    fieldVisibility = "PRIVATE"
    enableDecimalLogicalType = true
}

tasks.named("compileJava").configure {
    source(generateAvro)
}

springBoot {
    mainClass = 'iq.earthlink.social.shortvideousagestatsservice.ShortVideoUsageStatsServiceApplication'
    buildInfo()
}




def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

pact {
    publish {
        pactDirectory = "${buildDir}/pacts"
        pactBrokerUrl = 'http://localhost:8000/'
        pactBrokerUsername = 'pact_workshop'
        pactBrokerPassword = 'pact_workshop'
        tags = [getGitBranch(), 'dev', 'master']
        consumerVersion = getGitHash()
    }
}


sourceSets {
    main {
        java {
            srcDir "${buildDir.absolutePath}/generated/open-api/src/main/java"
        }
    }
}